// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineSchool.Domain.OnlineSchoolDB.EF.Context;

namespace OnlineSchool.Domain.Migrations
{
    [DbContext(typeof(OnlineSchoolDbContext))]
    [Migration("20210825130701_Current")]
    partial class Current
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasMaxLength(1);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email_Index")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Name")
                        .HasName("name_Index")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.BookedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("BookedCourse");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Configuration", b =>
                {
                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StripeKeyName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherSubjectId")
                        .HasName("teacherSubjectId_Index");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("name_Index");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.LessonCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonCalendar");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.LessonMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("LessonId", "MaterialId")
                        .IsUnique()
                        .HasName("lessonId_materialId_Index");

                    b.ToTable("LessonMaterial");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.LocationType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .HasName("fileName_Index");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.MultimediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MultimediaType");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EndTimezone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RecurrenceId")
                        .HasColumnName("RecurrenceID")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartTimezone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AuthDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasName("courseId_Index");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SocialNetwork");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasMaxLength(1);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email_Index");

                    b.HasIndex("Name")
                        .HasName("name_Index");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.StudentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FileName")
                        .HasName("fileName_Index");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentDocument");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrollment");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#FFFFFF");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name_Index");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.SubjectCategory", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SubjectCategory");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.SubjectLocation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<byte?>("SubjectLocationTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("SubjectTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectLocationTypeId");

                    b.ToTable("SubjectLocation");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasMaxLength(1);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email_Index");

                    b.HasIndex("Name")
                        .HasName("name_Index");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FileName")
                        .HasName("fileName_Index");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherDocument");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSocialNetwork", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("SocialNetworkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TeacherId", "SocialNetworkId");

                    b.HasIndex("SocialNetworkId");

                    b.ToTable("TeacherSocialNetwork");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "SubjectId")
                        .IsUnique()
                        .HasName("teacherId_subjectId_Index");

                    b.ToTable("TeacherSubject");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubjectMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TeacherSubjectId", "MaterialId")
                        .IsUnique()
                        .HasName("teacherSubjectId_materialId_Index");

                    b.ToTable("TeacherSubjectMaterial");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetRoleClaims", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserClaims", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserLogins", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserRoles", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUserTokens", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.BookedCourse", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Student", "Student")
                        .WithMany("BookedCourses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_BookedCourses_Students")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Subject", "Subject")
                        .WithMany("BookedCourses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_BookedCourses_Subjects")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Course", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubject", "TeacherSubject")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherSubjectId")
                        .HasConstraintName("FK_Course_TeacherSubject")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Lesson", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubject", "TeacherSubject")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherSubjectId")
                        .HasConstraintName("FK_Lesson_TeacherSubjects")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.LessonCalendar", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.LessonMaterial", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Lesson", "Lesson")
                        .WithMany("LessonMaterials")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_LessonMaterial_Lesson")
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Material", "Material")
                        .WithMany("LessonMaterials")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_LessonMaterial_Material")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Schedule", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Color", "Color")
                        .WithMany("Schedules")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Schedules_Colors");

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Subject", "Subject")
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Schedules_Subjects");

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Teacher", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Schedules_Teachers");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Session", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Session_Course")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.StudentDocument", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.DocumentType", "DocumentType")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_StudentDocument_DocumentType");

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Student", "Student")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentDocument_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.StudentEnrollment", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Student", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentEnrollments_Students");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.Subject", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.SubjectCategory", "Category")
                        .WithMany("Subjects")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Subjects_SubjectCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.SubjectLocation", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.LocationType", "SubjectLocationType")
                        .WithMany("SubjectLocations")
                        .HasForeignKey("SubjectLocationTypeId")
                        .HasConstraintName("FK_SubjectLocation_LocationType");
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherDocument", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.DocumentType", "DocumentType")
                        .WithMany("TeacherDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_TeacherDocument_DocumentType");

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Teacher", "Teacher")
                        .WithMany("TeacherDocuments")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherDocument_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSocialNetwork", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.SocialNetwork", "SocialNetwork")
                        .WithMany("TeacherSocialNetworks")
                        .HasForeignKey("SocialNetworkId")
                        .HasConstraintName("FK_TeacherSocialNetwork_SocialNetworks")
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Teacher", "Teacher")
                        .WithMany("TeacherSocialNetworks")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherSocialNetwork_Teachers")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubject", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_TeacherSubject_Subjects")
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherSubject_Teachers")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubjectMaterial", b =>
                {
                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.Material", "Material")
                        .WithMany("TeacherSubjectMaterials")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_TeacherSubjectMaterial_Material")
                        .IsRequired();

                    b.HasOne("OnlineSchool.Domain.OnlineSchoolDB.EF.TeacherSubject", "TeacherSubject")
                        .WithMany("TeacherSubjectMaterials")
                        .HasForeignKey("TeacherSubjectId")
                        .HasConstraintName("FK_TeacherSubjectMaterial_TeacherSubject")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
